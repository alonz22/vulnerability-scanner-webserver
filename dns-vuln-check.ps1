# Prompt for the domain name
$domain = Read-Host "Enter the domain name"

# Specify the DNS server you want to use (you can change this to a different DNS server)
$dnsServer = "8.8.8.8"
Write-Host    "`n======================================================================================================================================`n " 
Write-Host "`nChecking if PTR record exists for the domain $domain.....`n" 
# Perform a DNS lookup for A records for the given domain
$aRecords = Resolve-DnsName -Name $domain -Type A -Server $dnsServer -ErrorAction SilentlyContinue

# Check if A records were found for the domain
if ($aRecords) {
    foreach ($aRecord in $aRecords) {
        $ipAddress = $aRecord.IPAddress

        # Check if $ipAddress is not null or empty
        if ($ipAddress) {
            # Perform a DNS lookup for PTR records
            $ptrRecords = Resolve-DnsName -Name $ipAddress -Type PTR -Server $dnsServer -ErrorAction SilentlyContinue

            if ($ptrRecords) {
                # Rest of your code for processing PTR records
                Write-Host "`nPTR records found for IP address $ipAddress `n"
                $ptrRecords | ForEach-Object {
                    Write-Host "PTR Record Name: $($_.Name)" -ForegroundColor Green
                    Write-Host "PTR Record Value: $($_.NameHost)" -ForegroundColor Green
                }
            } else {
                # Handle case when PTR records are not found
                Write-Host "`nWARNING: PTR Record Not Found for IP address $ipAddress.`n" -ForegroundColor Yellow
                Write-Host "PTR (Pointer) records are important for reverse DNS resolution. 
                `nThey associate an IP address with a domain name, which is crucial for various network services, including email authentication and troubleshooting." -ForegroundColor Yellow
            }
        } else {
            # Handle case when $ipAddress is null or empty
            Write-Host "`nERROR: Might be a subdomain.`n" -ForegroundColor Red
        }
    }
}

Write-Host    "====================================================================================================================================== " -ForegroundColor Yellow

$aRecords = Resolve-DnsName -Name "www.$domain" -Type A -Server $dnsServer -ErrorAction SilentlyContinue

# Check if A records were found for 'www'
if ($aRecords) {
    $isIpAddresses = $aRecords | ForEach-Object { $_.IPAddress -as [ipaddress] }
    Write-Host "`nChecking for possible WAF service enabled for $domain.....`n" 
    # Check if there is at least one IP address in the A records
    if ($isIpAddresses -contains $null) {
        # If at least one A record is not an IP address, indicate the possibility of a WAF
        Write-Host "`nA record for 'www' contains non-IP address values (Possibly a WAF service detected for the domain)`n" -ForegroundColor Green
    } else {
        # If all A record values are IP addresses, indicate no WAF
        Write-Host "`nA record for 'www' points to IP addresses (No WAF detected for the domain)`n" -ForegroundColor Red
    }
} else {
    # If no A records were found for 'www', indicate the possibility of no WAF
    Write-Host "`nPossibly no WAF detected for the domain`n"
}
Write-Host    "====================================================================================================================================== " -ForegroundColor Yellow

#$pattern = "^[a-zA-Z0-9-]+\.(com|co\.il)$"

$pattern = "^[a-zA-Z0-9-]+\.(com|co\.il|org|net|edu|gov|int|mil|arpa|aero|biz|coop|info|museum|name|pro|tel|jobs|mobi|asia|cat|post|xxx|travel|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mf|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)$"


if ($domain -notmatch $pattern) {
    Write-Host "`nSkipping mail validation record discovery check, since it's a subdomain`n"
} else {
    # Perform a DNS lookup for MX records for the domain
    $mxRecords = Resolve-DnsName -Name $domain -Type MX -Server $dnsServer -ErrorAction SilentlyContinue

    # Check if MX records were found
    if ($mxRecords) {
        # If MX records were found, check for Default DKIM and DMARC records
        $defaultDkimRecords = Resolve-DnsName -Name "default._domainkey.$domain" -Type TXT -Server $dnsServer -ErrorAction SilentlyContinue
        $dmarcRecords = Resolve-DnsName -Name "_dmarc.$domain" -Type TXT -Server $dnsServer -ErrorAction SilentlyContinue
        Write-Host "`nScanning for DKIM record for $domain.....`n"

        # Check if Default DKIM and DMARC records were found and print their values
        if ($defaultDkimRecords) {
            $defaultDkimValue = $defaultDkimRecords.Strings
            Write-Host "`nDefault DKIM record found: $defaultDkimValue`n" -ForegroundColor Green
        } else {
            Write-Host "WARNING: DKIM Record Not Found For $domain." -ForegroundColor Yellow
            Write-Host "DKIM (DomainKeys Identified Mail) records add a cryptographic signature to email messages, allowing receivers to verify the authenticity of the sender, ensuring emails have not been tampered with in transit, and enhancing email trustworthiness." -ForegroundColor Yellow
        }

        Write-Host "`n======================================================================================================================================`n " -ForegroundColor Yellow

        Write-Host "`nScanning for DMARC record for $domain.....`n"

        if ($dmarcRecords) {
            $dmarcValue = $dmarcRecords.Strings
            Write-Host "`nDMARC record found: $dmarcValue`n" -ForegroundColor Green
        } else {
            Write-Host "WARNING: DMARC Record Not Found For $domain." -ForegroundColor Yellow
            Write-Host "DMARC (Domain-based Message Authentication, Reporting, and Conformance) records enhance email security by providing instructions to email receivers on how to handle emails that fail authentication checks, reducing phishing and spoofing risks." -ForegroundColor Yellow
        }

        Write-Host "`n======================================================================================================================================`n " -ForegroundColor Yellow

        Write-Host "`nScanning for SPF record for $domain.....`n"

        # Use nslookup to fetch SPF records and suppress stderr
        $spfRecords = & nslookup -q=TXT -type=TXT $domain $dnsServer 2>$null
        if ($spfRecords -match "v=spf1") {
            # If SPF record is found, print it
            Write-Host "`nSPF record found: $spfRecords`n" -ForegroundColor Green
        } else {
            # If no SPF record is found, print a message
            Write-Host "`nWARNING: SPF Record Not Found For $domain.`n" -ForegroundColor Red
            Write-Host "SPF (Sender Policy Framework) records help prevent email spoofing and protect your domain's reputation by specifying which mail servers are authorized to send email on behalf of your domain." -ForegroundColor Red
        }
    } else {
        # If no MX records were found, indicate the absence of email-related DNS records
        Write-Host "No MX records found (Possibly no email services configured)"
    }
}

Write-Host    "======================================================================================================================================`n " -ForegroundColor Yellow

Write-Host "`nChecking for DNSSEC for $domain.....`n" 
# Check for DNSKEY records
$dnskeyRecords = Resolve-DnsName -Name $domain -Type DNSKEY -Server $dnsServer -ErrorAction SilentlyContinue

if ($dnskeyRecords | Where-Object { $_.QueryType -eq "DNSKEY" }) {
    # If DNSKEY records were found, it indicates DNSSEC is enabled
    Write-Host "`nDNSSEC is enabled for $domain.`n" -ForegroundColor Green
} else {
    Write-Host "`nWARNING: DNSSEC is not enabled for $domain.`n" -ForegroundColor Yellow
    Write-Host "DNSSEC (Domain Name System Security Extensions) adds an extra layer of security to DNS by digitally signing DNS data, reducing the risk of DNS spoofing and cache poisoning attacks.`n" -ForegroundColor Yellow
}

Write-Host    "====================================================================================================================================== " -ForegroundColor Yellow

if ($domain -notmatch $pattern) {
    Write-Host "`nSkipping subdomains discovery check, since $domain is a subdomain`n"
}
elseif($domain -match $pattern){
$scanSubdomains = Read-Host "Do you want to scan for subdomains? (Y/N)"

if ($scanSubdomains -eq "Y" -or $scanSubdomains -eq "y") {
    # Subdomain scanning logic here
    Write-Host "`nScanning for common subdomains for the domain $domain, be patient. It may take a while.....`n" 
}



function Get-Subdomains {
    param(
        [string]$targetDomain
    )

    $commonSubdomains = @(
    "www",
    "mail",
    "admin",
    "test",
    "api",
    "api2",
    "mail2",
    "shop",
    "blog",
    "forum",
    "store",
    "news",
    "secure",
    "app",
    "cdn",
    "dev",
    "ftp",
    "help",
    "shop",
    "support",
    "my",
    "images",
    "download",
    "media",
    "en",
    "es",
    "de",
    "fr",
    "it",
    "ru",
    "he",
    "market",
    "marketing",
    "manage",
    "sec",
    "med",
    "medical",
    "webapp",
    "www-1",
    "www-2",
    "c2",
    "c3",
    "s1",
    "s2",
    "s3",
    "minisite",
    "ministes",
    "tag",
    "esx",
    "esxi",
    "v1",
    "v2",
    "lan",
    "ppc",
    "mx",
    "mx2",
    "smtp",
    "smtp2",
    "smtp3",
    "hosting",
    "db",
    "database",
    "sql",
    "ms",
    "mongo",
    "whm",
    "whmcs",
    "dot",
    "bot",
    "chef",
    "puppet",
    "jenkins",
    "mailx",
    "ntp",
    "ftp2",
    "ip",
    "ip4",
    "ipv4",
    "ip6",
    "ipv6",
    "mac",
    "pv",
    "java",
    "jsp",
    "data",
    "data2",
    "website",
    "websitepanel",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "il",
    "uk",
    "gr",
    "hk",
    "jp",
    "sg",
    "srv",
    "server",
    "srv",
    "srv1",
    "serv",
    "srv2",
    "srv-1",
    "srv-2",
    "pro",
    "active",
    "lms",
    "nms",
    "s",
    "pop",
    "imap",
    "tst",
    "prd",
    "production",
    "ptr",
    "PTR",
    "cname"
    "txt",
    "CNAME",
    "TXT",
    "tech",
    "tech2",
    "active",
    "passive",
    "master",
    "slave",
    "sync",
    "in-sync",
    "php",
    "psp",
    "php1",
    "php2",
    "dotnet",
    "dot",
    "domain",
    "ns",
    "ns1",
    "ns2",
    "ns3",
    "ns4",
    "www2",
    "www-2",
    "failover",
    "failback",
    "sp1",
    "postgre",
    "my",
    "mysql",
    "d1",
    "d",
    "d2",
    "d3",
    "old",
    "home",
    "homepage",
    "page",
    "crm",
    "int",
    "internal",
    "voip",
    "vip",
    "voip-1",
    "voip1",
    "voip-1",
    "voip2",
    "voip-2",
    "blog",
    "tnt",
    "tenant",
    "web",
    "web0",
    "web00",
    "web01",
    "web02",
    "web03",
    "web04",
    "web05",
    "web06",
    "web07",
    "web08",
    "web09",
    "web10",
    "web1",
    "web2",
    "web3",
    "web4",
    "web5",
    "web6",
    "web7",
    "web8",
    "web9",
    "web10",
    "security",
    "sec2",
    "secured",
    "hpt",
    "hp",
    "hpe",
    "honeypot",
    "backend",
    "backend1",
    "backend2",
    "backend3",
    "backend4"
      
)
    $subdomains = @()
    $subdomainCount = 0
    foreach ($subdomain in $commonSubdomains) {
        $fullSubdomain = "$subdomain.$targetDomain"
        $aRecords = Resolve-DnsName -Name $fullSubdomain -Type A -Server $dnsServer -ErrorAction SilentlyContinue
        if ($aRecords) {
            $subdomains += $fullSubdomain
            $subdomainCount++
        }
       
    }
    Write-Host "`nTotal Subdomains Found: $subdomainCount`n"
    return $subdomains
}

# Scan for Subdomains
$subdomains = Get-Subdomains -targetDomain $domain

if ($subdomains.Count -gt 0) {
    Write-Host "`nThe Following Subdomains Found:`n"
    $subdomains | ForEach-Object { Write-Host $_ -ForegroundColor Yellow }
} else {
    Write-Host "`nNo subdomains found`n" -ForegroundColor Green
}
}

Write-Host "`nDone Checking.`n"

Write-Host    "`n======================================================================================================================================`n " 
