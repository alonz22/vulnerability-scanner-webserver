# Prompt for the domain name
$domain = Read-Host "Enter the domain name"

# Specify the DNS server you want to use (you can change this to a different DNS server)
$dnsServer = "8.8.8.8"

Write-Host "`nChecking if PTR record exists for the domain $domain.....`n" 
# Perform a DNS lookup for A records for the given domain
$aRecords = Resolve-DnsName -Name $domain -Type A -Server $dnsServer -ErrorAction SilentlyContinue

# Check if A records were found for the domain
if ($aRecords) {
    foreach ($aRecord in $aRecords) {
        $ipAddress = $aRecord.IPAddress

        # Perform a DNS lookup for PTR records
        $ptrRecords = Resolve-DnsName -Name $ipAddress -Type PTR -Server $dnsServer -ErrorAction SilentlyContinue

        if ($ptrRecords) {
            # If PTR records were found, prompt the value
            Write-Host "`nPTR records found for IP address $ipAddress `n"
            $ptrRecords | ForEach-Object {
                Write-Host "PTR Record Name: $($_.Name)" -ForegroundColor Green
                Write-Host "PTR Record Value: $($_.NameHost)" -ForegroundColor Green
            }
        } else {
            # If no PTR records were found, print a warning message and description
            Write-Host "`nWARNING: PTR Record Not Found for IP address $ipAddress.`n" -ForegroundColor Yellow
            Write-Host "PTR (Pointer) records are important for reverse DNS resolution. 
            `nThey associate an IP address with a domain name, which is crucial for various network services, including email authentication and troubleshooting." -ForegroundColor Yellow
        }
    }
} else {
    # If no A records were found for the domain, indicate the possibility of no A records
    Write-Host "`nPossibly no A records found for the domain`n" -ForegroundColor Yellow
}


Write-Host    "====================================================================================================================================== " -ForegroundColor Yellow

$aRecords = Resolve-DnsName -Name "www.$domain" -Type A -Server $dnsServer -ErrorAction SilentlyContinue

# Check if A records were found for 'www'
if ($aRecords) {
    $isIpAddresses = $aRecords | ForEach-Object { $_.IPAddress -as [ipaddress] }
    Write-Host "`nChecking for possible WAF service enabled for $domain.....`n" 
    # Check if there is at least one IP address in the A records
    if ($isIpAddresses -contains $null) {
        # If at least one A record is not an IP address, indicate the possibility of a WAF
        Write-Host "`nA record for 'www' contains non-IP address values (Possibly a WAF service detected for the domain)`n" -ForegroundColor Green
    } else {
        # If all A record values are IP addresses, indicate no WAF
        Write-Host "`nA record for 'www' points to IP addresses (No WAF detected for the domain)`n" -ForegroundColor Red
    }
} else {
    # If no A records were found for 'www', indicate the possibility of no WAF
    Write-Host "`nPossibly no WAF detected for the domain`n"
}
Write-Host    "====================================================================================================================================== " -ForegroundColor Yellow

# Perform a DNS lookup for MX records for the domain
$mxRecords = Resolve-DnsName -Name $domain -Type MX -Server $dnsServer -ErrorAction SilentlyContinue

# Check if MX records were found
if ($mxRecords) {
    # If MX records were found, check for Default DKIM and DMARC records
    $defaultDkimRecords = Resolve-DnsName -Name "default._domainkey.$domain" -Type TXT -Server $dnsServer -ErrorAction SilentlyContinue
    $dmarcRecords = Resolve-DnsName -Name "_dmarc.$domain" -Type TXT -Server $dnsServer -ErrorAction SilentlyContinue
    Write-Host "`nChecking for mail validation records for $domain.....`n" 
    # Check if Default DKIM and DMARC records were found and print their values
    if ($defaultDkimRecords) {
        $defaultDkimValue = $defaultDkimRecords.Strings
        Write-Host "`nDefault DKIM record found: $defaultDkimValue`n" -ForegroundColor Green
    }

    else{

    Write-Host "WARNING: DKIM Record Not Found For $domain." -ForegroundColor Yellow
    Write-Host "DKIM (DomainKeys Identified Mail) records add a cryptographic signature to email messages, allowing receivers to verify the authenticity 
    `nof the sender, ensuring emails have not been tampered with in transit, and enhancing email trustworthiness." -ForegroundColor Yellow

    }
    if ($dmarcRecords) {
        $dmarcValue = $dmarcRecords.Strings
        Write-Host "`nDMARC record found: $dmarcValue`n" -ForegroundColor Green
    }

    else{
    Write-Host "WARNING: DMARC Record Not Found For $domain." -ForegroundColor Yellow
    Write-Host "DMARC (Domain-based Message Authentication, Reporting, and Conformance) records enhance email security by providing instructions to email 
    `nreceivers on how to handle emails that fail authentication checks, reducing phishing and spoofing risks." -ForegroundColor Yellow
    }

    # Use nslookup to fetch SPF records and suppress stderr
    $spfRecords = & nslookup -q=TXT -type=TXT $domain $dnsServer 2>$null
    if ($spfRecords -match "v=spf1") {
        # If SPF record is found, print it
        Write-Host "`nSPF record found: $spfRecords`n" -ForegroundColor Green
    } else {
        # If no SPF record is found, print a message
          Write-Host "`nWARNING: SPF Record Not Found For $domain.`n" -ForegroundColor Red
          Write-Host "SPF (Sender Policy Framework) records help prevent email spoofing and protect your domain's reputation by specifying which mail servers `nare authorized to send email on behalf of your domain.`n" -ForegroundColor Red
    }
} else {
    # If no MX records were found, indicate the absence of email-related DNS records
    Write-Host "No MX records found (Possibly no email services configured)"
}
Write-Host    "======================================================================================================================================`n " -ForegroundColor Yellow

Write-Host "`nChecking for DNSSEC for $domain.....`n" 
# Check for DNSKEY records
$dnskeyRecords = Resolve-DnsName -Name $domain -Type DNSKEY -Server $dnsServer -ErrorAction SilentlyContinue

if ($dnskeyRecords | Where-Object { $_.QueryType -eq "DNSKEY" }) {
    # If DNSKEY records were found, it indicates DNSSEC is enabled
    Write-Host "`nDNSSEC is enabled for $domain.`n" -ForegroundColor Green
} else {
    Write-Host "`nWARNING: DNSSEC is not enabled for $domain.`n" -ForegroundColor Yellow
    Write-Host "DNSSEC (Domain Name System Security Extensions) adds an extra layer of security to DNS by digitally signing DNS data, reducing the risk of DNS spoofing and cache poisoning attacks.`n" -ForegroundColor Yellow
}

Write-Host    "====================================================================================================================================== " -ForegroundColor Yellow

function Get-Subdomains {
    param(
        [string]$targetDomain
    )

    $commonSubdomains = @("www", "mail", "admin", "test", "api", "mail2", "shop")  # Add more common subdomains as needed
    $subdomains = @()

    foreach ($subdomain in $commonSubdomains) {
        $fullSubdomain = "$subdomain.$targetDomain"
        $aRecords = Resolve-DnsName -Name $fullSubdomain -Type A -Server $dnsServer -ErrorAction SilentlyContinue
        if ($aRecords) {
            $subdomains += $fullSubdomain
        }
    }

    return $subdomains
}

# Scan for Subdomains
$subdomains = Get-Subdomains -targetDomain $domain
Write-Host "`nScanning for subdomains for the domain $domain.....`n" 
if ($subdomains.Count -gt 0) {
    Write-Host "`nSubdomains Found:`n"
    $subdomains | ForEach-Object { Write-Host $_ -ForegroundColor Yellow }
} else {
    Write-Host "`nNo subdomains found`n" -ForegroundColor Green
}

Write-Host    "`n======================================================================================================================================`n " -ForegroundColor Yellow
